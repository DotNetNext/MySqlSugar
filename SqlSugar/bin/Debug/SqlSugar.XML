<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SqlSugar</name>
    </assembly>
    <members>
        <member name="T:SqlSugar.IDataReaderEntityBuilder`1">
            <summary>
            ** 描述：DataReader实体生成
            ** 创始时间：2010-2-28
            ** 修改时间：-
            ** 作者：网络
            ** 使用说明：
            </summary>
        </member>
        <member name="T:SqlSugar.JsonConverter">
            <summary>
            作者热心的：dukang
            </summary>
        </member>
        <member name="M:SqlSugar.JsonConverter.DataTableToJson(System.Data.DataTable)">
            <summary>
            dataTable转成JSON
            add sunkaixuan 
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.JsonConverter.JsonClass(System.Object)">
            <summary>
            自定义查询对象转换动态类
            add dukang by 2016-05-19
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.JsonConverter.Serialize(System.Object,System.Boolean)">
            <summary>
            object动态类转换json包
            add dukang by 2016-05-19
            </summary>
            <param name="obj">对象</param>
            <param name="DateConvert">时间戳是否转换成日期类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.JsonConverter.ConvertJson(System.String)">
            <summary>
            json转换object动态类
            add duk by 2016-05-19
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.JsonConverter.ToJson(System.Data.IDataReader)">
            <summary>   
            DataReader转换为Json   
            </summary>   
            <param name="dataReader">DataReader对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:SqlSugar.JsonConverter.ToJson(System.Data.DataSet)">
            <summary>   
            DataSet转换为Json   
            add dukang by 2016-05-19
            </summary>   
            <param name="dataSet">DataSet对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:SqlSugar.JsonConverter.ToJson(System.Data.DataTable,System.String)">
            <summary>  
            DataTable转成Json   
            add dukang by 2016-05-19
            </summary>  
            <param name="jsonName"></param>  
            <param name="dt"></param>  
            <returns></returns>  
        </member>
        <member name="M:SqlSugar.JsonConverter.ToJson(System.Data.DataTable)">
            <summary>   
            Datatable转换为Json   
            add dukang by 2016-05-19
            </summary>   
            <param name="table">Datatable对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:SqlSugar.JsonConverter.StringFormat(System.String,System.Type)">
            <summary>  
            格式化字符型、日期型、布尔型  
            add dukang by 2016-05-19
            </summary>  
            <param name="str"></param>  
            <param name="type"></param>  
            <returns></returns>  
        </member>
        <member name="M:SqlSugar.JsonConverter.String2Json(System.String)">
            <summary>  
            过滤特殊字符  
            add dukang by 2016-05-19
            </summary>  
            <param name="s"></param>  
            <returns></returns>  
        </member>
        <member name="T:SqlSugar.DynamicJsonObject">
            <summary>
            动态JSON解析
            add dukang by 2016-05-19
            </summary>
        </member>
        <member name="T:SqlSugar.DynamicJsonConverter">
            <summary>
            动态JSON转换
            add dukang by 2016-05-19
            </summary>
        </member>
        <member name="T:SqlSugar.Sqlable">
            <summary>
            ** 描述：Queryable是多表查询基类，基于拥有大量查询扩展函数
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="F:SqlSugar.Sqlable.DB">
            <summary>
            数据接口
            </summary>
        </member>
        <member name="F:SqlSugar.Sqlable.Where">
            <summary>
            Where临时数据
            </summary>
        </member>
        <member name="F:SqlSugar.Sqlable.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:SqlSugar.Sqlable.Sql">
            <summary>
            sql临时数据
            </summary>
        </member>
        <member name="P:SqlSugar.Sqlable.OrderBy">
            <summary>
            OrderBy临时数据
            </summary>
        </member>
        <member name="P:SqlSugar.Sqlable.GroupBy">
            <summary>
            GroupBy临时数据
            </summary>
        </member>
        <member name="T:SqlSugar.ResolveExpress">
            <summary>
            ** 描述：拉姆达解析类
            ** 创始时间：2015-7-20
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** qq：610262374 
            ** 使用说明：使用请注名作者
            </summary>
        </member>
        <member name="M:SqlSugar.ResolveExpress.CreateSqlElements(System.Linq.Expressions.Expression,SqlSugar.ResolveExpress.MemberType@,System.Boolean)">
            <summary>
            递归解析表达式路由计算
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.ResolveExpress.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            根据条件生成对应的sql查询操作符
            </summary>
            <param name="expressiontype"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudPubMethod.GetPageIndex(System.Int32,System.Double)">
            <summary>
            获取pageIndex
            </summary>
            <param name="pageIndex"></param>
            <param name="configCount"></param>
        </member>
        <member name="M:SqlSugar.CloudPubMethod.GetConnection(System.Collections.Generic.List{SqlSugar.CloudConnectionConfig})">
            <summary>
            根据rate获取随机Connection
            </summary>
            <param name="configList"></param>
        </member>
        <member name="M:SqlSugar.CloudPubMethod.TaskFactory``1(System.Func{System.Int32,``0},System.Threading.Tasks.Task{``0}[],System.Int32)">
            <summary>
            并行执行任务并且传入索引
            </summary>
            <param name="method">函数参数i</param>
            <param name="tasks">task数组</param>
            <param name="i">索引</param>
        </member>
        <member name="M:SqlSugar.CloudPubMethod.GetIsSmallPageIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            分页索引是否很小
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="configCount"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudPubMethod.GetIsSmallPageIndexByReverse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            倒数分页索引是否很小
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="configCount"></param>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.SqlSugarTool">
            <summary>
            ** 描述：SqlSugar工具类
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.DataReaderToList``1(System.Type,System.Data.IDataReader,System.String,System.Boolean,System.Boolean)">
            <summary>
            Reader转成List《T》
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dr"></param>
            <param name="isClose"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetParameters(System.Object)">
            <summary>
            将实体对象转换成SqlParameter[] 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetObjectToDictionary(System.Object)">
            <summary>
            将实体对象转换成 Dictionary《string, string》
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetGetPropertiesByCache(System.Type,System.String,SqlSugar.CacheManager{System.Reflection.PropertyInfo[]})">
            <summary>
            获取type属性cache
            </summary>
            <param name="type"></param>
            <param name="cachePropertiesKey"></param>
            <param name="cachePropertiesManager"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.IsPrimaryKey(SqlSugar.SqlSugarClient,System.String)">
            <summary>
            判段是否包含主键
            </summary>
            <param name="db"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetIdentitiesKeyByTableName(SqlSugar.SqlSugarClient,System.String)">
             <summary>
            根据表名获取自添列 keyTableName Value columnName
             </summary>
             <param name="db"></param>
             <param name="tableName"></param>
             <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetPrimaryKeyByTableName(SqlSugar.SqlSugarClient,System.String)">
            <summary>
            根据表获取主键
            </summary>
            <param name="db"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.SqlLikeWordEncode(System.String)">
            <summary>
            处理like条件的通配符
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.PackagingSQL(System.String,System.String)">
            <summary>
            包装SQL
            </summary>
            <param name="sql"></param>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="F:SqlSugar.SqlSugarTool.SpecialRequestForm">
            <summary>
            使用页面自动填充sqlParameter时 Request.Form出现特殊字符时可以重写Request.Form方法，使用时注意加锁并且用到将该值设为null
            </summary>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetParameterDictionary(System.Boolean)">
            <summary>
            获取参数到键值集合根据页面Request参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarTool.GetParameterArray(System.Boolean)">
            <summary>
            获取参数到键值集合根据页面Request参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.IHttpStorageObject`1">
            <summary>
            ** 描述：http存储对象接口
            ** 创始时间：2015-5-29
            ** 修改时间：-
            ** 作者：sunkaixuan
            </summary>
        </member>
        <member name="M:SqlSugar.TaskExtensions.Count(SqlSugar.Taskable{System.Int32})">
            <summary>
            获取count
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.Any(SqlSugar.Taskable{System.Int32})">
             <summary>
            是否存在这条记录
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.Max``1(SqlSugar.Taskable{``0})">
            <summary>
            获取最大值 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.Avg(SqlSugar.TaskableWithCount{System.Int32})">
            <summary>
            获取平均值
            </summary>
            <param name="thisValue"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.Avg(SqlSugar.TaskableWithCount{System.Decimal})">
            <summary>
            获取平均值
            </summary>
            <param name="thisValue"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.Avg(SqlSugar.TaskableWithCount{System.Double})">
            <summary>
            获取平均值
            </summary>
            <param name="thisValue"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.Min``1(SqlSugar.Taskable{``0})">
            <summary>
            获取最小值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.ToList``1(SqlSugar.Taskable{``0})">
            <summary>
            将Task中的结果集合并成List集成
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.ToSingle``1(SqlSugar.Taskable{``0})">
            <summary>
             返回序列中的唯一元素；如果该序列为空，此方法将引发异常；如果该序列包含多个元素，此方法将引发异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.ToSingleOrDefault``1(SqlSugar.Taskable{``0})">
            <summary>
             返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.ToFirst``1(SqlSugar.Taskable{``0})">
            <summary>
            获取第一行数据,，如果序列中不包含任何元素,则会抛出异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.ToFirstOrDefault``1(SqlSugar.Taskable{``0})">
            <summary>
            如果序列中不包含任何元素，则返回默认值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.MergeTable``1(SqlSugar.Taskable{``0})">
            <summary>
            将结果集合并到一个集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.MergeEntities``1(SqlSugar.Taskable{``0})">
            <summary>
            将结果集合并到一个集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.TaskExtensions.MergeValue``1(SqlSugar.Taskable{``0})">
            <summary>
            将结果集合并到一个集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.CloudClient">
            <summary>
            ** 描述：SQL糖 ORM 核心类升级版 分布式存储和云计算框架
            ** 创始时间：2015-12-14
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="F:SqlSugar.CloudClient.Tran">
            <summary>
            分布式事务
            </summary>
        </member>
        <member name="F:SqlSugar.CloudClient.PageMaxHandleNumber">
            <summary>
            内存中处理数据的最大值（默认：1000）
            </summary>
        </member>
        <member name="F:SqlSugar.CloudClient.FormatTimeByDataBase">
            <summary>
            将时间格式化成数据库格式,如果数据库格式和默认值不相同需要重新设置(默认:yyyy-MM-dd hh:mm:ss.ms)
            </summary>
        </member>
        <member name="M:SqlSugar.CloudClient.InsertRange``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            批量插入
            使用说明:sqlSugar.Insert(List《entity》);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">插入对象</param>
            <param name="isIdentity">主键是否为自增长,true可以不填,false必填</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.Insert``1(``0,System.Boolean)">
            <summary>
            插入
            使用说明:sqlSugar.Insert(entity);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">插入对象</param>
            <param name="isIdentity">主键是否为自增长,true可以不填,false必填</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.#ctor">
            <summary>
            私有禁止无参实例
            </summary>
        </member>
        <member name="M:SqlSugar.CloudClient.#ctor(System.Collections.Generic.List{SqlSugar.CloudConnectionConfig})">
            <summary>
            ** 描述：SQL糖 ORM 核心类升级版 分布式存储和云计算框架
            ** 创始时间：2015-12-14
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
            <param name="configList">云计算连接配置</param>
        </member>
        <member name="M:SqlSugar.CloudClient.Delete``2(``1[])">
            <summary>
            批量删除
            注意：whereIn 主键集合  
            使用说明:Delete《T》(new int[]{1,2,3}) 或者  Delete《T》(3)
            </summary>
            <param name="whereIn"> delete ids </param>
        </member>
        <member name="M:SqlSugar.CloudClient.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除,根据表达示
            使用说明:
            Delete《T》(it=>it.id=100) 或者Delete《T》(3)
            </summary>
            <param name="expression">筛选表达示</param>
        </member>
        <member name="M:SqlSugar.CloudClient.FalseDelete``2(System.String,``1[])">
            <summary>
            批量删除
            注意：whereIn 主键集合  
            使用说明:Delete《T》(new int[]{1,2,3}) 或者  Delete《T》(3)
            </summary>
            <param name="whereIn"> delete ids </param>
        </member>
        <member name="M:SqlSugar.CloudClient.FalseDelete``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            假删除，根据表达示
            使用说明::
            FalseDelete《T》(new int[]{1,2,3})或者Delete《T》(3)
            </summary>
            <param name="field">更新删除状态字段</param>
            <param name="expression">筛选表达示</param>
        </member>
        <member name="M:SqlSugar.CloudClient.Taskable``1(System.String,System.Object)">
            <summary>
            多线程请求所有数据库节点，同步汇总结果
            </summary>
            <typeparam name="T">支持DataTable、实体类和值类型</typeparam>
            <param name="sql"></param>
            <param name="whereObj">参数 例如: new { id="1",name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.Taskable``1(System.String,System.Collections.Generic.List{System.String},System.Object)">
            <summary>
            多线程请求所有数据库节点，同步汇总结果
            </summary>
            <typeparam name="T">支持DataTable、实体类和值类型</typeparam>
            <param name="sql"></param>
            <param name="connectionStringList">连接字符串数组</param>
            <param name="whereObj">参数 例如: new { id="1",name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.TaskableWithCount``1(System.String,System.String,System.Object)">
            <summary>
            多线程请求所有数据库节点，同步汇总结果
            </summary>
            <typeparam name="T">支持DataTable、实体类和值类型</typeparam>
            <param name="sqlSelect">sql from之前（例如： "select count(*)" ）</param>
            <param name="sqlEnd">sql from之后（例如： "from table where id=1" </param>
            <param name="whereObj">参数 例如: new { id="1",name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.TaskableWithPage``1(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.String,SqlSugar.OrderByType,System.Object)">
            <summary>
            获取分页数据(注意：该函数不可以在事务内使用)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unqueField">数据库中数据唯一的列（建议：主键GUID）</param>
            <param name="sql"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <param name="orderByField"></param>
            <param name="orderByType"></param>
            <param name="whereObj">参数 例如: new { id="1",name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.TaskableWithPage``1(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Collections.Generic.List{SqlSugar.OrderByDictionary},System.Object)">
            <summary>
            获取分页数据(注意：该函数不可以在事务内使用)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unqueField">数据库中数据唯一的列（建议：主键GUID）</param>
            <param name="sql"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <param name="orderByTypes">排序信息集合</param>
            <param name="whereObj">参数 例如: new { id="1",name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.Update``2(System.Object,``1[])">
            <summary>
            更新
            注意：rowObj为T类型将更新该实体的非主键所有列，如果rowObj类型为匿名类将更新指定列
            使用说明:sqlSugar.Update《T》(rowObj,whereObj);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowObj">new T(){name="张三",sex="男"}或者new {name="张三",sex="男"}</param>
            <param name="whereIn">new int[]{1,2,3}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.Update``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            更新
            注意：rowObj为T类型将更新该实体的非主键所有列，如果rowObj类型为匿名类将更新指定列
            使用说明:sqlSugar.Update《T》(rowObj,whereObj);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowObj">new T(){name="张三",sex="男"}或者new {name="张三",sex="男"}</param>
            <param name="expression">it.id=100</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:SqlSugar.CloudClient.RemoveAllCache">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:SqlSugar.CloudClient.TranDispose">
            <summary>
            清空事务
            </summary>
        </member>
        <member name="M:SqlSugar.CloudClient.SettingConnection(SqlSugar.SqlSugarClient)">
            <summary>
            设置连接
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:SqlSugar.CloudClient.GetWhereCompare(System.String,System.Collections.Generic.List{SqlSugar.OrderByDictionary},System.Data.DataRow,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取Where比较条件
            </summary>
            <param name="whereCompare"></param>
            <param name="sampleRow"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.GetSqlSampleRowSql(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            获取样品SQL
            </summary>
            <param name="unqueField"></param>
            <param name="sql"></param>
            <param name="fullOrderByString"></param>
            <param name="orderByFieldsString"></param>
            <param name="dataSampleIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.GetSampleIndexSql(System.String,System.String,System.String,System.String,System.String,System.Data.DataRow)">
            <summary>
            获取样品索引SQL
            </summary>
            <param name="unqueField"></param>
            <param name="sql"></param>
            <param name="fullOrderByString"></param>
            <param name="whereCompare"></param>
            <param name="sqlOtherPage"></param>
            <param name="sampleRow"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CloudClient.InitSampleRow(System.String,System.String,System.Collections.Generic.List{SqlSugar.OrderByDictionary},System.Object,System.Int32,System.String,System.String@,System.Int32,System.String@,System.Data.DataRow@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.Data.DataRow}@)">
            <summary>
            初始化样品数据
            </summary>
            <param name="unqueField"></param>
            <param name="sql"></param>
            <param name="orderByTypes"></param>
            <param name="whereObj"></param>
            <param name="configCount"></param>
            <param name="fullOrderByString"></param>
            <param name="whereCompare"></param>
            <param name="pageBegin"></param>
            <param name="sqlOtherPage"></param>
            <param name="sampleRow"></param>
            <param name="sampleRowIndex"></param>
            <param name="sampleEachIndex"></param>
            <param name="innerDataSampleList"></param>
        </member>
        <member name="T:SqlSugar.ClassGenerating">
            <summary>
            ** 描述：实体生成类
            ** 创始时间：2015-4-17
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** qq：610262374 欢迎交流,共同提高 ,命名语法等写的不好的地方欢迎大家的给出宝贵建议
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4482152.html
            </summary>
        </member>
        <member name="M:SqlSugar.ClassGenerating.DynamicToClass(System.Object,System.String)">
            <summary>
            根据匿名类获取实体类的字符串
            </summary>
            <param name="entity">匿名对象</param>
            <param name="className">生成的类名</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.ClassGenerating.DataTableToClass(System.Data.DataTable,System.String,System.String,System.Collections.Generic.List{SqlSugar.PubModel.DataTableMap})">
            <summary>
            根据DataTable获取实体类的字符串
            </summary>
            <param name="sql"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.ClassGenerating.SqlToClass(SqlSugar.SqlSugarClient,System.String,System.String)">
            <summary>
            根据SQL语句获取实体类的字符串
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.ClassGenerating.TableNameToClass(SqlSugar.SqlSugarClient,System.String)">
            <summary>
            根据表名获取实体类的字符串
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.ClassGenerating.CreateClassFiles(SqlSugar.SqlSugarClient,System.String,System.String,System.Nullable{System.Boolean},System.Action{System.String})">
            <summary>
            创建SQL实体文件
            </summary>
            <param name="db"></param>
            <param name="fileDirectory"></param>
            <param name="nameSpace">命名空间（默认：null）</param>
            <param name="tableOrView">是生成视图文件还是表文件,null生成表和视图，true生成表，false生成视图(默认为：null)</param>
        </member>
        <member name="M:SqlSugar.ClassGenerating.CreateClassFilesInterface(SqlSugar.SqlSugarClient,System.Nullable{System.Boolean},System.Action{System.Data.DataTable,System.String,System.String})">
            <summary>
            创建SQL实体文件
            </summary>
            <param name="db"></param>
            <param name="fileDirectory"></param>
            <param name="nameSpace">命名空间（默认：null）</param>
            <param name="tableOrView">是生成视图文件还是表文件,null生成表和视图，true生成表，false生成视图(默认为：null)</param>
        </member>
        <member name="M:SqlSugar.ClassGenerating.CreateClassFilesByTableNames(SqlSugar.SqlSugarClient,System.String,System.String,System.String[])">
            <summary>
             创建SQL实体文件,指定表名
            </summary>
        </member>
        <member name="M:SqlSugar.ClassGenerating.GetTableNames(SqlSugar.SqlSugarClient)">
            <summary>
            获取所有数据库表名
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.ClassGenerating.ChangeType(System.Type)">
            <summary>
            匹配类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.LanguageHelper">
            <summary>
            多语言帮助类
            </summary>
        </member>
        <member name="M:SqlSugar.LanguageHelper.UpdateView(SqlSugar.PubModel.Language,SqlSugar.SqlSugarClient)">
            <summary>
            创建多语言视图，带有LanguageId=1的所有有视图1替换成languageValue 并且新创视图 名称为 原有视图名+_$_+suffix
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.Check">
            <summary>
            ** 描述：逻辑出错抛出异常
            ** 创始时间：2015-7-19
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 修改人：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SqlSugar.Check.ArgumentNullException(System.Object,System.String)">
            <summary>
            使用导致此异常的参数的名称初始化 System.ArgumentNullException 类的新实例。
            </summary>
            <param name="checkObj"></param>
            <param name="message"></param>
        </member>
        <member name="M:SqlSugar.Check.Exception(System.Boolean,System.String,System.String[])">
            <summary>
            使用指定的错误消息初始化 System.Exception 类的新实例。
            </summary>
            <param name="isException"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:SqlSugar.SqlSugarClient">
            <summary>
            ** 描述：SQL糖 ORM 核心类
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4649904.html
            </summary>
        </member>
        <member name="T:SqlSugar.SqlHelper">
            <summary>
            ** 描述：底层SQL辅助函数
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="F:SqlSugar.SqlHelper.isClearParameters">
            <summary>
            是否清空SqlParameters
            </summary>
        </member>
        <member name="F:SqlSugar.SqlHelper.IsGetPageParas">
            <summary>
            将页面参数自动填充到SqlParameter []，无需在程序中指定，这种情况需要注意是否有重复参数
            例如：
                var list = db.Queryable《Student》().Where("id=@id").ToList();
                以前写法
                var list = db.Queryable《Student》().Where("id=@id", new { id=Request["id"] }).ToList();
            </summary>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.SetMappingTables(System.Collections.Generic.List{SqlSugar.KeyValue})">
            <summary>
            设置实体类与表名的映射， Key为实体类 Value为表名
            </summary>
            <param name="mappingTables"></param>
        </member>
        <!-- 对于成员“M:SqlSugar.SqlSugarClient.SetSerialNumber(System.Collections.Generic.List{SqlSugar.PubModel.SerialNumber})”忽略有格式错误的 XML 注释 -->
        <member name="F:SqlSugar.SqlSugarClient.SerializerDateFormat">
            <summary>
            设置序列化实体转成JSON的日期格式
            </summary>
        </member>
        <member name="F:SqlSugar.SqlSugarClient.PageModel">
            <summary>
            设置分页类型
            </summary>
        </member>
        <member name="F:SqlSugar.SqlSugarClient.Language">
            <summary>
            设置多语言配置
            </summary>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.SetFilterFilterParas(System.Collections.Generic.Dictionary{System.String,System.Func{SqlSugar.KeyValueObj}})">
            <summary>
            设置过滤器（用户权限过滤）
            Func《过滤器的名字,过滤的条件SQL，过滤的参数对象，返回条件加参数对象》
            </summary>
            <param name="filters"></param>
        </member>
        <member name="F:SqlSugar.SqlSugarClient.CurrentFilterKey">
            <summary>
            数据过滤器键
            </summary>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Sqlable">
            <summary>
            创建多表查询对象
            </summary>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Queryable``1">
            <summary>
            创建单表查询对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Queryable``1(System.String)">
            <summary>
            创建单表查询对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.SqlQuery``1(System.String,System.Object)">
            <summary>
            根据SQL语句将结果集映射到List《T》
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="whereObj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.SqlQueryDynamic(System.String,System.Object)">
            <summary>
            根据SQL语句将结果集映射到dynamic
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="whereObj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.SqlQueryJson(System.String,System.Object)">
            <summary>
            根据SQL语句将结果集映射到json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="whereObj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.SqlQuery``1(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            根据SQL语句将结果集映射到List《T》
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="pars"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.SqlQuery``1(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            根据SQL语句将结果集映射到List《T》
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="reader"></param>
            <param name="pars"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.InsertRange``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            批量插入
            使用说明:sqlSugar.Insert(List《entity》);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">插入对象</param>
            <param name="isIdentity">主键是否为自增长,true可以不填,false必填</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Insert``1(``0,System.Boolean)">
            <summary>
            插入
            使用说明:sqlSugar.Insert(entity);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">插入对象</param>
            <param name="isIdentity">该属性已经作废可以不填，主键是否为自增长,true可以不填,false必填</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Update``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            更新
            注意：rowObj为T类型将更新该实体的非主键所有列，如果rowObj类型为匿名类将更新指定列
            使用说明:sqlSugar.Update《T》(rowObj,whereObj);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowObj">new T(){name="张三",sex="男"}或者new {name="张三",sex="男"}</param>
            <param name="expression">it.id=100</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Update``1(``0)">
            <summary>
            更新
            </summary>
            <param name="rowObj">实体必须包含主键</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Update``2(System.Object,``1[])">
            <summary>
            更新
            注意：rowObj为T类型将更新该实体的非主键所有列，如果rowObj类型为匿名类将更新指定列
            使用说明:sqlSugar.Update《T》(rowObj,whereObj);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowObj">new T(){name="张三",sex="男"}或者new {name="张三",sex="男"}</param>
            <param name="whereIn">new int[]{1,2,3}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除,根据表达示
            使用说明:
            Delete《T》(it=>it.id=100) 或者Delete《T》(3)
            </summary>
            <param name="expression">筛选表达示</param>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.Delete``2(``1[])">
            <summary>
            批量删除
            注意：whereIn 主键集合  
            使用说明:Delete《T》(new int[]{1,2,3}) 或者  Delete《T》(3)
            </summary>
            <param name="whereIn"> delete ids </param>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.FalseDelete``2(System.String,``1[])">
            <summary>
            批量假删除
            使用说明::
            FalseDelete《T》("is_del",new int[]{1,2,3})或者Delete《T》("is_del",3)
            </summary>
            <param name="field">更新删除状态字段</param>
            <param name="whereIn">delete ids</param>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.FalseDelete``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            假删除，根据表达示
            使用说明::
            FalseDelete《T》(new int[]{1,2,3})或者Delete《T》(3)
            </summary>
            <param name="field">更新删除状态字段</param>
            <param name="expression">筛选表达示</param>
        </member>
        <member name="F:SqlSugar.SqlSugarClient.ClassGenerating">
            <summary>
            生成实体的对象
            </summary>
        </member>
        <member name="M:SqlSugar.SqlSugarClient.RemoveAllCache">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="P:SqlSugar.SqlSugarClient.IsNoLock">
            <summary>
            查询是否允许脏读，（默认为:true）
            </summary>
        </member>
        <member name="P:SqlSugar.SqlSugarClient.DisableUpdateColumns">
            <summary>
            设置禁止更新的列
            </summary>
        </member>
        <member name="T:SqlSugar.Queryable`1">
            <summary>
            ** 描述：Queryable是单表查询基类，基于拥有大量查询扩展函数
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="F:SqlSugar.Queryable`1.DB">
            <summary>
            数据接口
            </summary>
        </member>
        <member name="F:SqlSugar.Queryable`1.Where">
            <summary>
            Where临时数据
            </summary>
        </member>
        <member name="F:SqlSugar.Queryable`1.Params">
            <summary>
            SqlParameter临时数据
            </summary>
        </member>
        <member name="F:SqlSugar.Queryable`1.WhereIndex">
            <summary>
            条件索引
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.TName">
            <summary>
            T的名称
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.Type">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.Skip">
            <summary>
            Skip临时数据
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.Take">
            <summary>
            Take临时数据
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.OrderBy">
            <summary>
            Order临时数据
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.Select">
            <summary>
            Select临时数据
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:SqlSugar.Queryable`1.GroupBy">
            <summary>
            分组查询
            </summary>
        </member>
        <member name="T:SqlSugar.JoinType">
            <summary>
            join类型
            </summary>
        </member>
        <member name="T:SqlSugar.ApplyType">
            <summary>
            Apply类型
            </summary>
        </member>
        <member name="T:SqlSugar.OrderByType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="T:SqlSugar.PageModel">
            <summary>
            分页类型
            </summary>
        </member>
        <member name="T:SqlSugar.IsWhatExtenions">
            <summary>
            ** 描述：逻辑判段是什么？
            ** 创始时间：2015-5-29
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4539654.html
            </summary>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            值在的范围？
            </summary>
            <param name="thisValue"></param>
            <param name="begin">大于等于begin</param>
            <param name="end">小于等于end</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            值在的范围？
            </summary>
            <param name="thisValue"></param>
            <param name="begin">大于等于begin</param>
            <param name="end">小于等于end</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsIn``1(``0,``0[])">
            <summary>
            在里面吗?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsContainsIn(System.String,System.String[])">
            <summary>
            在里面吗?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsNullOrEmpty(System.Object)">
            <summary>
            是null或""?
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            是null或""?
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsNullOrEmpty(System.Guid)">
            <summary>
            是null或""?
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsValuable(System.Object)">
            <summary>
            有值?(与IsNullOrEmpty相反)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsValuable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            有值?(与IsNullOrEmpty相反)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsZero(System.Object)">
            <summary>
            是零?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsInt(System.Object)">
            <summary>
            是INT?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsNoInt(System.Object)">
            <summary>
            不是INT?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsMoney(System.Object)">
            <summary>
            是金钱?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsDate(System.Object)">
            <summary>
            是时间?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsEamil(System.Object)">
            <summary>
            是邮箱?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsMobile(System.Object)">
            <summary>
            是手机?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsTelephone(System.Object)">
            <summary>
            是座机?
            </summary>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsIDcard(System.Object)">
            <summary>
            是身份证?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsFax(System.Object)">
            <summary>
            是传真?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IsWhatExtenions.IsMatch(System.Object,System.String)">
             <summary>
            是适合正则匹配?
             </summary>
             <param name="thisValue"></param>
             <param name="begin">大于等于begin</param>
             <param name="end">小于等于end</param>
             <returns></returns>
        </member>
        <member name="T:SqlSugar.QueryableExtensions">
            <summary>
            ** 描述：Queryable扩展函数
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Where``1(SqlSugar.Queryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            条件筛选
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.In``2(SqlSugar.Queryable{``0},System.String,``1[])">
            <summary>
            条件筛选 例如：InFieldName 为 a inValues 值为 new string[]{"a" ,"b"} 生成的SQL就是  a in('a','b')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.In``2(SqlSugar.Queryable{``0},System.String,System.Collections.Generic.List{``1})">
            <summary>
            条件筛选
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Where``1(SqlSugar.Queryable{``0},System.String,System.Object)">
            <summary>
            条件筛选
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="whereString"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.OrderBy``1(SqlSugar.Queryable{``0},System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="orderFileds">如：id asc,name desc </param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.GroupBy``1(SqlSugar.Queryable{``0},System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="groupFileds">如：id,name </param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Skip``1(SqlSugar.Queryable{``0},System.Int32)">
            <summary>
             跳过序列中指定数量的元素，然后返回剩余的元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Take``1(SqlSugar.Queryable{``0},System.Int32)">
            <summary>
            从起始点向后取指定条数的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Single``1(SqlSugar.Queryable{``0})">
            <summary>
             返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.SingleOrDefault``1(SqlSugar.Queryable{``0})">
            <summary>
             返回序列的唯一元素；如果该序列为空返回Default(T),序列超过1条返则抛出异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.FirstOrDefault``1(SqlSugar.Queryable{``0})">
            <summary>
              返回序列中的第一个元素,如果序列为NULL返回default(T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.First``1(SqlSugar.Queryable{``0})">
            <summary>
             返回序列中的第一个元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Any``1(SqlSugar.Queryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Any``1(SqlSugar.Queryable{``0})">
            <summary>
             确定序列是否包含任何元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Single``1(SqlSugar.Queryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Select``2(SqlSugar.Queryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            将源数据对象转换到新对象中
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="queryable"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Select``2(SqlSugar.Queryable{``0},System.String)">
            <summary>
            将源数据对象转换到新对象中
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="queryable"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Count``1(SqlSugar.Queryable{``0})">
            <summary>
            获取序列总记录数
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Max``2(SqlSugar.Queryable{``0},System.String)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="maxField">列</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.Min``2(SqlSugar.Queryable{``0},System.String)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="minField">列</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.ToList``1(SqlSugar.Queryable{``0})">
            <summary>
            将Queryable转换为List《T》集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.ToJson``1(SqlSugar.Queryable{``0})">
            <summary>
            将Queryable转换为Json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.ToDynamic``1(SqlSugar.Queryable{``0})">
            <summary>
            将Queryable转换为Dynamic
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.ToDataTable``1(SqlSugar.Queryable{``0})">
            <summary>
            将Queryable转换为DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.QueryableExtensions.ToPageList``1(SqlSugar.Queryable{``0},System.Int32,System.Int32)">
            <summary>
            将Queryable转换为分页后的List《T》集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.IEnumerableExtensions">
            <summary>
            IEnumerable扩展函数
            </summary>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,SqlSugar.OrderByType)">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.String,SqlSugar.OrderByType)">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.OrderByDataRow``1(System.Collections.Generic.IEnumerable{``0},System.String,SqlSugar.OrderByType)">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.ThenByDataRow``1(System.Linq.IOrderedEnumerable{``0},System.String,SqlSugar.OrderByType)">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.OrderByDataRow``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.OrderByDataRow(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Collections.Generic.List{SqlSugar.OrderByDictionary},SqlSugar.OrderByDictionary)">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.ThenByDataRow``1(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.OrderByReverse``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.ThenByReverse``1(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.OrderByDataRowReverse``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.ThenByDataRowReverse``1(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.List{SqlSugar.OrderByDictionary})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortField"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.IEnumerableExtensions.ConvertField(System.Object)">
            <summary>
            解决GUID在SQL和C#中，排序方式不一致
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:SqlSugar.SqlSugarToolExtensions”忽略有格式错误的 XML 注释 -->
        <member name="M:SqlSugar.SqlSugarToolExtensions.ToJoinSqlInVal``1(``0[])">
            <summary>
            数组字串转换成SQL参数格式，例如: 参数 new int{1,2,3} 反回 "'1','2','3'"
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarToolExtensions.ToSqlValue(System.String)">
            <summary>
            将字符串转换成SQL参数格式，例如: 参数value返回'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarToolExtensions.ToSqlFilter(System.String)">
            <summary>
            SQL关键字过滤,过滤拉姆达式中的特殊字符，出现特殊字符则引发异常
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarToolExtensions.ToSuperSqlFilter(System.String)">
            <summary>
             指定数据类型，如果不在指定类当中则引发异常(只允许输入指定字母、数字、下划线、时间、GUID)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarToolExtensions.GetLockString(System.Boolean)">
            <summary>
            获取锁字符串
            </summary>
            <param name="isNoLock"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarToolExtensions.GetSelectFiles(System.String)">
            <summary>
            获取Select需要的字段
            </summary>
            <param name="selectFileds"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarToolExtensions.GetGroupBy(System.String)">
            <summary>
            
            </summary>
            <param name="groupByFileds"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlSugarToolExtensions.RequestParasToSqlParameters(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            将Request里的参数转成SqlParameter[]
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.FileSugar">
            <summary>
            ** 描述：文件公共类
            ** 创始时间：2010-2-28
            ** 修改时间：-
            ** 修改人：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SqlSugar.FileSugar.GetFiePathAndCreateDirectoryByCode``1(System.String,``0,System.String)">
            <summary>
            根据文件目录、编号、文件名生成文件路径，并且创建文件存放目录
            格式为:/directory/code/filename
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directory"></param>
            <param name="code"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.FileSugar.GetFiePathAndCreateDirectoryByDate``1(System.String,System.String)">
            <summary>
            根据文件目录、日期、文件名生成文件路径，并且创建文件存放目录
            格式为:/directory/2015/01/01/filename
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directory"></param>
            <param name="code"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.FileSugar.GetMapPath(System.String)">
            <summary>
            获得当前绝对路径
            </summary>
            <param name="strPath">指定的路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:SqlSugar.FileSugar.GetMinPic(System.String,System.String,System.Int32)">
            <summary>
            获取缩略图片路径
            </summary>
            <param name="dir"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:SqlSugar.FileSugar.sync">
            <summary>
            同步标识
            </summary>
        </member>
        <member name="M:SqlSugar.FileSugar.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.Contains(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.Contains(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param> 
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:SqlSugar.FileSugar.CreateDirectory(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.CreateFile(System.String)">
            <summary>
            创建一个文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.CreateFile(System.String,System.Byte[])">
            <summary>
            创建一个文件,并将字节流写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="buffer">二进制流数据</param>
        </member>
        <member name="M:SqlSugar.FileSugar.CreateFile(System.String,System.String)">
            <summary>
            创建一个文件,并将字符串写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">字符串数据</param>
        </member>
        <member name="M:SqlSugar.FileSugar.CreateFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            创建一个文件,并将字符串写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">字符串数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:SqlSugar.FileSugar.OpenDirectory(System.String)">
            <summary>
            打开目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.OpenFile(System.String)">
            <summary>
            打开文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.GetDirectoryFromFilePath(System.String)">
            <summary>
            从文件绝对路径中获取目录路径
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.GetLineCount(System.String)">
            <summary>
            获取文本文件的行数
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileSize(System.String)">
            <summary>
            获取一个文件的长度,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileSizeByKB(System.String)">
            <summary>
            获取一个文件的长度,单位为KB
            </summary>
            <param name="filePath">文件的路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileSizeByMB(System.String)">
            <summary>
            获取一个文件的长度,单位为MB
            </summary>
            <param name="filePath">文件的路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:SqlSugar.FileSugar.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:SqlSugar.FileSugar.WriteText(System.String,System.String)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:SqlSugar.FileSugar.AppendText(System.String,System.String)">
            <summary>
            向文本文件的尾部追加内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
        </member>
        <member name="M:SqlSugar.FileSugar.CopyTo(System.String,System.String)">
            <summary>
            将源文件的内容复制到目标文件中
            </summary>
            <param name="sourceFilePath">源文件的绝对路径</param>
            <param name="destFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.MoveToDirectory(System.String,System.String)">
            <summary>
            将文件移动到指定目录( 剪切 )
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descDirectoryPath">移动到的目录的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.Move(System.String,System.String)">
            <summary>
            将文件移动到指定目录，并指定新的文件名( 剪切并改名 )
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.StreamToBytes(System.IO.Stream)">
            <summary>
            将流读取到缓冲区中
            </summary>
            <param name="stream">原始流</param>
        </member>
        <member name="M:SqlSugar.FileSugar.FileToBytes(System.String)">
            <summary>
            将文件读取到缓冲区中
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.FileToString(System.String)">
            <summary>
            将文件读取到字符串中
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.FileToString(System.String,System.Text.Encoding)">
            <summary>
            将文件读取到字符串中
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileName(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileNameNoExtension(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 不包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SqlSugar.FileSugar.ClearDirectory(System.String)">
            <summary>
            清空指定目录下所有文件及子目录,但该目录依然保存.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.ClearFile(System.String)">
            <summary>
            清空文件内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.DeleteFile(System.String)">
            <summary>
            删除指定文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.DeleteDirectory(System.String)">
            <summary>
            删除指定目录及其所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:SqlSugar.FileSugar.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="strFilePath"></param>
            <param name="strValue"></param>
        </member>
        <member name="M:SqlSugar.FileSugar.WriteFile(System.String,System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="strFilePath"></param>
            <param name="strValue"></param>
            <param name="charset"></param>
        </member>
        <member name="M:SqlSugar.FileSugar.ShowWord(System.String)">
            <summary>
            在网页中显示WORD文档
            </summary>
        </member>
        <member name="M:SqlSugar.FileSugar.GetFileSream(System.String)">
            <summary>
            根据路径得到文件流
            </summary>
            <param name="strFilePath"></param>
            <param name="strValue"></param>
        </member>
        <member name="T:SqlSugar.SqlableExtensions">
            <summary>
            ** 描述：Sqlable扩展函数
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.From(SqlSugar.Sqlable,System.Object,System.String)">
            <summary>
            Form
            </summary>
            <param name="sqlable"></param>
            <param name="modelObj">表名</param>
            <param name="shortName">表名简写</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.From``1(SqlSugar.Sqlable,System.String)">
            <summary>
            Form
            </summary>
            <param name="sqlable"></param>
            <param name="modelObj">表名</param>
            <param name="shortName">表名简写</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.Join(SqlSugar.Sqlable,System.Object,System.String,System.String,System.String,SqlSugar.JoinType)">
            <summary>
            Join
            </summary>
            <param name="sqlable"></param>
            <param name="leftFiled">join左边连接字段</param>
            <param name="RightFiled">join右边连接字段</param>
            <param name="type">join类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.Join``1(SqlSugar.Sqlable,System.String,System.String,System.String,SqlSugar.JoinType)">
            <summary>
            Join
            </summary>
            <param name="sqlable"></param>
            <param name="leftFiled">join左边连接字段</param>
            <param name="RightFiled">join右边连接字段</param>
            <param name="type">join类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.Where(SqlSugar.Sqlable,System.String)">
            <summary>
            Where
            </summary>
            <param name="sqlable"></param>
            <param name="where">查询条件、开头无需写 AND或者WHERE</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.OrderBy(SqlSugar.Sqlable,System.String)">
            <summary>
            OrderBy
            </summary>
            <param name="sqlable"></param>
            <param name="orderBy">排序字段，可以多个</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.Apply(SqlSugar.Sqlable,System.String,System.String,SqlSugar.ApplyType)">
            <summary>
            Apply
            </summary>
            <param name="sqlable"></param>
            <param name="applySql">apply主体内容</param>
            <param name="shotName">apply简写</param>
            <param name="type">Apply类型</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.GroupBy(SqlSugar.Sqlable,System.String)">
            <summary>
            GroupBy
            </summary>
            <param name="sqlable"></param>
            <param name="groupBy">GroupBy字段，可以多个</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToList``1(SqlSugar.Sqlable,System.String,System.Object,System.String,System.String)">
            <summary>
            设置查询列执行查询，并且将结果集转成List《T》
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.GetAllParas(SqlSugar.Sqlable,System.Object)">
            <summary>
            获取页面参数
            </summary>
            <param name="sqlable"></param>
            <param name="whereObj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToDataTable(SqlSugar.Sqlable,System.String,System.Object)">
            <summary>
            设置查询列执行查询，并且将结果集转成DataTable
            </summary>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToJson(SqlSugar.Sqlable,System.String,System.Object)">
            <summary>
            设置查询列执行查询，并且将结果集转成json
            </summary>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToDynamic(SqlSugar.Sqlable,System.String,System.Object)">
            <summary>
            设置查询列执行查询，并且将结果集转成dynamic
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.ToClass(SqlSugar.Sqlable,System.String,System.Object)">
            <summary>
            生成查询结果对应的实体类字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.Count(SqlSugar.Sqlable,System.Object,System.String,System.String)">
            <summary>
            反回记录数
            </summary>
            <param name="sqlable"></param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToPageList``1(SqlSugar.Sqlable,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            设置查询列和分页参数执行查询，并且将结果集转成List《T》
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="orderByFiled">Order By字段，可以多个</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToPageTable(SqlSugar.Sqlable,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            设置查询列和分页参数执行查询，并且将结果集转成DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="orderByFiled">Order By字段，可以多个</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToPageJson(SqlSugar.Sqlable,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            设置查询列和分页参数执行查询，并且将结果集转成json
            </summary>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="orderByFiled">Order By字段，可以多个</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.SqlableExtensions.SelectToPageDynamic(SqlSugar.Sqlable,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            设置查询列和分页参数执行查询，并且将结果集转成dynamic
            </summary>
            <param name="sqlable"></param>
            <param name="fileds">查询列</param>
            <param name="orderByFiled">Order By字段，可以多个</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="whereObj">SQL参数,例如:new{id=1,name="张三"}</param>
            <returns></returns>
        </member>
        <member name="T:SqlSugar.PubModel.SerialNumber">
            <summary>
            流水号设置实体
            </summary>
        </member>
        <member name="P:SqlSugar.PubModel.SerialNumber.GetNumFunc">
            <summary>
            获取流水号函数
            </summary>
        </member>
        <member name="T:SqlSugar.PubModel.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:SqlSugar.PubModel.Language.ReplaceViewStringKey">
            <summary>
            需要全局替换的字符串Key(用于替换默认语言)
            </summary>
        </member>
        <member name="F:SqlSugar.PubModel.Language.ReplaceViewStringValue">
            <summary>
            需要全局替换的字符串Value(用于替换默认语言)
            </summary>
        </member>
        <member name="P:SqlSugar.PubModel.Language.Suffix">
            <summary>
            数据库里面的语言后缀
            </summary>
        </member>
        <member name="P:SqlSugar.PubModel.Language.LanguageValue">
            <summary>
            数据库语言的VALUE
            </summary>
        </member>
        <member name="T:SqlSugar.CacheManager`1">
            <summary>
            ** 描述：缓存操作类
            ** 创始时间：2015-6-9
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4563462.html
            </summary>
            <typeparam name="K">键</typeparam>
            <typeparam name="V">值</typeparam>
        </member>
        <member name="M:SqlSugar.CacheManager`1.ContainsKey(System.String)">
            <summary>         
            验证key是否存在       
            </summary>         
            <param name="key">key</param>         
            <returns> /// 	存在<c>true</c> 不存在<c>false</c>.        /// /// </returns>         
        </member>
        <member name="M:SqlSugar.CacheManager`1.Get(System.String)">
            <summary>         
            根据key获取value  
            </summary>         
            <param name="key">key</param>         
            <returns></returns>         
        </member>
        <member name="M:SqlSugar.CacheManager`1.GetInstance">
            <summary>         
            获取实例 （单例模式）       
            </summary>         
            <returns></returns>         
        </member>
        <member name="M:SqlSugar.CacheManager`1.Add(System.String,`0)">
            <summary>         
            插入缓存(默认20分钟)        
            </summary>         
            <param name="key"> key</param>         
            <param name="value">value</param>          
        </member>
        <member name="M:SqlSugar.CacheManager`1.Add(System.String,`0,System.Int32)">
            <summary>         
            插入缓存        
            </summary>         
            <param name="key"> key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
        </member>
        <member name="M:SqlSugar.CacheManager`1.Add(System.String,`0,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>         
            插入缓存.         
            </summary>         
            <param name="key">key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
            <param name="priority">缓存项属性</param>         
        </member>
        <member name="M:SqlSugar.CacheManager`1.Add(System.String,`0,System.Int32,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>         
            插入缓存.         
            </summary>         
            <param name="key">key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
            <param name="priority">缓存项属性</param>         
        </member>
        <member name="M:SqlSugar.CacheManager`1.Remove(System.String)">
            <summary>         
            删除缓存         
            </summary>         
            <param name="key">key</param>         
        </member>
        <member name="M:SqlSugar.CacheManager`1.RemoveAll">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:SqlSugar.CacheManager`1.RemoveAll(System.Func{System.String,System.Boolean})">
            <summary>
            清除所有包含关键字的缓存
            </summary>
            <param name="removeKey">关键字</param>
        </member>
        <member name="M:SqlSugar.CacheManager`1.GetAllKey">
            <summary>
            获取所有缓存key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlSugar.CacheManager`1.CreateKey(System.String)">
             <summary>         
            创建KEY   
             </summary>         
             <param name="key">Key</param>         
             <returns></returns>         
        </member>
        <member name="P:SqlSugar.CacheManager`1.Item(System.String)">
             <summary>         
            根据key获取value     
             </summary>         
             <value></value>      
        </member>
        <member name="T:SqlSugar.SqlSugarException">
            <summary>
            ** 描述：SqlSugar自定义异常
            ** 创始时间：2015-7-13
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="T:SqlSugar.CloudConnectionConfig">
            <summary>
            云计算连接配置
            </summary>
        </member>
        <member name="P:SqlSugar.CloudConnectionConfig.Rate">
            <summary>
            处理机率,值越大机率越高
            </summary>
        </member>
        <member name="P:SqlSugar.CloudConnectionConfig.ConnectionString">
            <summary>
            链接字符串名称
            </summary>
        </member>
        <member name="T:SqlSugar.CloudSearchResult`1">
            <summary>
            云搜索Task反回类
            </summary>
        </member>
        <member name="P:SqlSugar.CloudSearchResult`1.Entities">
            <summary>
            集合
            </summary>
        </member>
        <member name="P:SqlSugar.CloudSearchResult`1.Value">
            <summary>
            单个对象
            </summary>
        </member>
        <member name="P:SqlSugar.CloudSearchResult`1.DataTable">
            <summary>
            DataTable
            </summary>
        </member>
        <member name="P:SqlSugar.CloudSearchResult`1.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:SqlSugar.CloudSearchResult`1.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="T:SqlSugar.Taskable`1">
            <summary>
            云计扩展类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SqlSugar.Taskable`1.Tasks">
            <summary>
            任务
            </summary>
        </member>
        <member name="P:SqlSugar.Taskable`1.Sql">
            <summary>
            sql
            </summary>
        </member>
        <member name="P:SqlSugar.Taskable`1.WhereObj">
            <summary>
            数据库参数(例如:new{id=1,name="张三"})
            </summary>
        </member>
        <member name="T:SqlSugar.TaskableWithCount`1">
            <summary>
            云计扩展类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SqlSugar.TaskableWithCount`1.Tasks">
            <summary>
            任务
            </summary>
        </member>
        <member name="P:SqlSugar.TaskableWithCount`1.Sql">
            <summary>
            sql
            </summary>
        </member>
        <member name="P:SqlSugar.TaskableWithCount`1.WhereObj">
            <summary>
            数据库参数(例如:new{id=1,name="张三"})
            </summary>
        </member>
    </members>
</doc>
